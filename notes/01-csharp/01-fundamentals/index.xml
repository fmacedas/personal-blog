<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fundamentals on Fernando's Blog</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/</link><description>Recent content in Fundamentals on Fernando's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/01-introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/01-introduction/</guid><description>&lt;!-- Getting Started -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Getting Started&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>What&amp;rsquo;s CSharp?&lt;/strong>&lt;/p>
&lt;p>C# is a high-level, general-purpose programming language developed by Microsoft as part of the .NET framework. It&amp;rsquo;s an object-oriented language, meaning it uses objects to structure code and data, and is used to build a variety of applications. C# is known for its ease of learning, strong community support, and ability to produce highly performant code.&lt;/p>
&lt;p>&lt;strong>.NET SDK Instalation&lt;/strong>&lt;/p>
&lt;p>The easiest way to have the .NET SDK installed in your personal computer is to download &lt;a href="https://visualstudio.microsoft.com/" target="_blank" rel="noopener">Visual Studio&lt;/a>. You can also use other IDE, but you will need to install the &lt;a href="https://dotnet.microsoft.com/en-us/download/visual-studio-sdks" target="_blank" rel="noopener">SDK&lt;/a> manually.&lt;/p></description></item><item><title>Basic Types</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/02-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/02-types/</guid><description>&lt;!-- Data types -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Data_Types&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>There are two different data types in C#:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Value Types:&lt;/strong> Directly store the data. Once you assign a value, it holds that data
&lt;ul>
&lt;li>&lt;code>int&lt;/code>, &lt;code>char&lt;/code>, &lt;code>float&lt;/code> are just a few examples.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Reference Types:&lt;/strong> Store a memory address. They point to the address of the value.
&lt;ul>
&lt;li>&lt;code>string&lt;/code>, &lt;code>class&lt;/code>, &lt;code>array&lt;/code> are commonly used.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Integer data type -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Integer&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>Math operations:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> sum = &lt;span style="color:#ae81ff">7&lt;/span> + &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> difference = &lt;span style="color:#ae81ff">7&lt;/span> - &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> product = &lt;span style="color:#ae81ff">7&lt;/span> * &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> quotient = &lt;span style="color:#ae81ff">7&lt;/span> / &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> modulus = &lt;span style="color:#ae81ff">7&lt;/span> % &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Sum: &amp;#34;&lt;/span> + sum); &lt;span style="color:#75715e">// Sum: 12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Difference: &amp;#34;&lt;/span> + difference); &lt;span style="color:#75715e">// Difference: 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Product: &amp;#34;&lt;/span> + product); &lt;span style="color:#75715e">// Product: 35&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Quotient: &amp;#34;&lt;/span> + quotient); &lt;span style="color:#75715e">// Quotient: 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Modulus: {7 % 5}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Modulus: 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Order of operations&lt;/strong>&lt;/p></description></item><item><title>Methods</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/03-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/03-methods/</guid><description>&lt;!-- Methods -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Methods&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>No params:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Generating random numbers:&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DisplayRandomNumbers(); &lt;span style="color:#75715e">// 17 29 46 36 3 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> DisplayRandomNumbers()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Random random = &lt;span style="color:#66d9ef">new&lt;/span> Random();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; &lt;span style="color:#ae81ff">5&lt;/span>; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">$&amp;#34;{random.Next(1, 100)} &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>Using parameters:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>CountTo(&lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> CountTo(&lt;span style="color:#66d9ef">int&lt;/span> max)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; max; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.Write(&lt;span style="color:#e6db74">$&amp;#34;{i}, &amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 0, 1, 2, 3, 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>Optional parameters:&lt;/strong>&lt;/p></description></item><item><title>Flow Control</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/04-flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/04-flow-control/</guid><description>&lt;!-- Condition -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Condition&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>if-else operator&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> color = &lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (color == &lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s black.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (color == &lt;span style="color:#e6db74">&amp;#34;white&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s white.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s other color.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>Conditional Operator&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> saleAmount = &lt;span style="color:#ae81ff">1001&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> discount = saleAmount &amp;gt; &lt;span style="color:#ae81ff">1000&lt;/span> ? &lt;span style="color:#ae81ff">100&lt;/span> : &lt;span style="color:#ae81ff">50&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Discount: {discount}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>Scope&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bool&lt;/span> flag = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Inside the code block: {value}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Prints value.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Outside the code block: {value}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Gives error because value is declared inside the if code block.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Switch Case -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Switch&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> fruit = &lt;span style="color:#e6db74">&amp;#34;apple&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">switch&lt;/span> (fruit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;apple&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;App will display information for apple.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;banana&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;App will display information for banana.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cherry&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;App will display information for cherry.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;App will not display information about any fruit.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Loop -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Loop&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>&lt;strong>Foreach&lt;/strong>&lt;/p></description></item><item><title>Data Type Conversion</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/05-convert-data-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/05-convert-data-types/</guid><description>&lt;!-- Casting type to convert -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Casting&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>Casting truncates the value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">decimal&lt;/span> myDecimal = &lt;span style="color:#ae81ff">3.14&lt;/span>m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;decimal: {myDecimal}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// decimal: 3.14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> myInt = (&lt;span style="color:#66d9ef">int&lt;/span>)myDecimal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;int: {myInt}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// int: 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Convert number to string -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>To String&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> first = &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> second = &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> message = first.ToString() + second.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(message); &lt;span style="color:#75715e">// 57&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Convert string to number using Parse() -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Parse&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> first = &lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> second = &lt;span style="color:#e6db74">&amp;#34;7&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> sum = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(first) + &lt;span style="color:#66d9ef">int&lt;/span>.Parse(second);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(sum); &lt;span style="color:#75715e">// 12&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Convert string to number using TryParse() -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Parse&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;102&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> result = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>.TryParse(&lt;span style="color:#66d9ef">value&lt;/span>, &lt;span style="color:#66d9ef">out&lt;/span> result))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Measurement: {result}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Unable to report the measurement.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Convert string to number using Convert class -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Convert&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>Convert rounds the value.&lt;/p></description></item><item><title>Methods on Arrays</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/06-methods-on-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/06-methods-on-arrays/</guid><description>&lt;!-- Sorting an array -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Sort&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span>[] pallets = [ &lt;span style="color:#e6db74">&amp;#34;B14&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A11&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;B12&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A13&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Sorted...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Array.Sort(pallets);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> pallet &lt;span style="color:#66d9ef">in&lt;/span> pallets)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;-- {pallet}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// A11, A13, B12, B14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Reverse an array -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Reverse&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span>[] pallets = [ &lt;span style="color:#e6db74">&amp;#34;A11&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A13&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;B12&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;B14&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Reversed...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Array.Reverse(pallets);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> pallet &lt;span style="color:#66d9ef">in&lt;/span> pallets)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;-- {pallet}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// B14, B12, A13, A11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Clear an array -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Clear&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span>[] pallets = [ &lt;span style="color:#e6db74">&amp;#34;B14&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A11&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;B12&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A13&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Array.Clear(pallets, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Clearing 2 ... count: {pallets.Length}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> pallet &lt;span style="color:#66d9ef">in&lt;/span> pallets)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;-- {pallet}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// null, null, B12, A13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Resize an array -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Resize&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span>[] pallets = [&lt;span style="color:#e6db74">&amp;#34;B14&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A11&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;B12&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;A13&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Array.Resize(&lt;span style="color:#66d9ef">ref&lt;/span> pallets, &lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Resizing 6 ... count: {pallets.Length}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pallets[&lt;span style="color:#ae81ff">4&lt;/span>] = &lt;span style="color:#e6db74">&amp;#34;C01&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pallets[&lt;span style="color:#ae81ff">5&lt;/span>] = &lt;span style="color:#e6db74">&amp;#34;C02&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> pallet &lt;span style="color:#66d9ef">in&lt;/span> pallets)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;-- {pallet}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// B14, A11, B12, A13, C01, C02&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Join an array -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Join&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span>[] valueArray = [&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Array.Reverse(valueArray);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// string result = new string(valueArray);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> result = String.Join(&lt;span style="color:#e6db74">&amp;#34;|&amp;#34;&lt;/span>, valueArray); &lt;span style="color:#75715e">// a|b|c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(result);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Split an array -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Split&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> result = &lt;span style="color:#e6db74">&amp;#34;123|456|789&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span>[] items = result.Split(&lt;span style="color:#e6db74">&amp;#39;|&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">string&lt;/span> item &lt;span style="color:#66d9ef">in&lt;/span> items)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(item); &lt;span style="color:#75715e">// 123, 456, 789&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Data Formatting</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/07-data-formatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/07-data-formatting/</guid><description>&lt;!-- Composite Formatting -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Composite Formatting&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> first = &lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> second = &lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> result = &lt;span style="color:#66d9ef">string&lt;/span>.Format(&lt;span style="color:#e6db74">&amp;#34;{0} {1}!&amp;#34;&lt;/span>, first, second);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(result); &lt;span style="color:#75715e">// Hello World!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Formatting Currency -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Formatting Currency&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">decimal&lt;/span> price = &lt;span style="color:#ae81ff">123.45&lt;/span>m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> discount = &lt;span style="color:#ae81ff">50&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Price: {price:C} (Save {discount:C})&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Price: $123.45 (Save $50.00)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Formatting Numbers -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Formatting Numbers&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">decimal&lt;/span> measurement = &lt;span style="color:#ae81ff">123456.78912&lt;/span>m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Measurement: {measurement:N} units&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Measurement: 123,456.79 units&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Measurement: {measurement:N4} units&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Measurement: 123,456.7891 units&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Formatting Percentage -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Formatting Percentage&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">decimal&lt;/span> tax = .&lt;span style="color:#ae81ff">36785&lt;/span>m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Tax rate: {tax:P2}&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Tax rate: 36.79%&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Padding -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Padding&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> input = &lt;span style="color:#e6db74">&amp;#34;Pad this&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(input.PadLeft(&lt;span style="color:#ae81ff">12&lt;/span>)); &lt;span style="color:#75715e">// &amp;#34; Pad this&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(input.PadLeft(&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>)); &lt;span style="color:#75715e">// &amp;#34;****Pad this&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(input.PadRight(&lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;*&amp;#39;&lt;/span>)); &lt;span style="color:#75715e">// &amp;#34;Pad this****&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>String Methods</title><link>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/08-string-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/01-fundamentals/08-string-methods/</guid><description>&lt;!-- IndexOf -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>IndexOf&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> message = &lt;span style="color:#e6db74">&amp;#34;Find what is (inside the parentheses)&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> openingPosition = message.IndexOf(&lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> closingPosition = message.IndexOf(&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(openingPosition); &lt;span style="color:#75715e">// 13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(closingPosition); &lt;span style="color:#75715e">// 36&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Substring -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Substring&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> message = &lt;span style="color:#e6db74">&amp;#34;What is the value &amp;lt;span&amp;gt;between the tags&amp;lt;/span&amp;gt;?&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> openSpan = &lt;span style="color:#e6db74">&amp;#34;&amp;lt;span&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> closeSpan = &lt;span style="color:#e6db74">&amp;#34;&amp;lt;/span&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> openingPosition = message.IndexOf(openSpan);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> closingPosition = message.IndexOf(closeSpan);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openingPosition += openSpan.Length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> length = closingPosition - openingPosition;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(message.Substring(openingPosition, length)); &lt;span style="color:#75715e">// between the tags&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- LastIndexOf -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>LastIndexOf&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> message = &lt;span style="color:#e6db74">&amp;#34;hello there!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> first_h = message.IndexOf(&lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> last_h = message.LastIndexOf(&lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;For the message: &amp;#39;{message}&amp;#39;, the first &amp;#39;h&amp;#39; is at position {first_h} and the last &amp;#39;h&amp;#39; is at position {last_h}.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// For the message: &amp;#39;hello there!&amp;#39;, the first &amp;#39;h&amp;#39; is at position 0 and the last &amp;#39;h&amp;#39; is at position 7.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- IndexOfAny -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>IndexOfAny&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> message = &lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span>[] charsToFind = { &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;e&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;i&amp;#39;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> index = message.IndexOfAny(charsToFind);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;Found &amp;#39;{message[index]}&amp;#39; in &amp;#39;{message}&amp;#39; at index: {index}.&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Found &amp;#39;e&amp;#39; in &amp;#39;Hello, world!&amp;#39; at index: 1.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Remove -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Remove&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> data = &lt;span style="color:#e6db74">&amp;#34;12345John Smith 5000 3 &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> updatedData = data.Remove(&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(updatedData); &lt;span style="color:#75715e">// 123455000 3 &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Replace -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Replace&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">string&lt;/span> message = &lt;span style="color:#e6db74">&amp;#34;This--is--ex-amp-le--da-ta&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message = message.Replace(&lt;span style="color:#e6db74">&amp;#34;--&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message = message.Replace(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(message); &lt;span style="color:#75715e">// This is example data&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item></channel></rss>